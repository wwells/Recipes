name: Add Recipe Workflow

on:
  issues:
    types: [opened]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Check for recipe-add label
        run: |
          if ! echo "${{ toJson(github.event.issue.labels) }}" | grep -q 'recipe-add'; then
            echo "No recipe-add label, exiting."
            exit 0
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate recipe ID
        id: generate-id
        run: |
          echo "Checking for existing recipes.json..."
          if [ -f "data/recipes.json" ]; then
            echo "Found recipes.json, reading existing IDs..."
            # More robust ID extraction
            LAST_ID=$(grep -o '"id": "recipe_[0-9]*"' data/recipes.json | tail -1 | sed 's/.*recipe_\([0-9]*\).*/\1/')
            echo "Last ID found: $LAST_ID"
            
            if [ -z "$LAST_ID" ]; then
              echo "No valid ID found, starting with recipe_0001"
              NEW_ID="recipe_0001"
            else
              echo "Calculating next ID..."
              # Force decimal interpretation by removing leading zeros
              LAST_ID_DECIMAL=$(echo "$LAST_ID" | sed 's/^0*//')
              if [ -z "$LAST_ID_DECIMAL" ]; then
                LAST_ID_DECIMAL=0
              fi
              NEXT_ID=$((LAST_ID_DECIMAL + 1))
              NEW_ID=$(printf "recipe_%04d" $NEXT_ID)
              echo "Next ID will be: $NEW_ID"
            fi
          else
            echo "No recipes.json found, starting with recipe_0001"
            NEW_ID="recipe_0001"
          fi
          
          # Fallback: if we still don't have a valid ID, use timestamp
          if [ -z "$NEW_ID" ]; then
            echo "Fallback: using timestamp-based ID"
            NEW_ID="recipe_$(date +%s)"
          fi
          
          echo "Final recipe_id: $NEW_ID"
          echo "recipe_id=$NEW_ID" >> $GITHUB_OUTPUT
      
      - name: Validate recipe ID
        run: |
          echo "Validating recipe ID..."
          if [ -z "${{ steps.generate-id.outputs.recipe_id }}" ]; then
            echo "❌ Error: recipe_id is empty!"
            exit 1
          else
            echo "✅ Recipe ID is valid: ${{ steps.generate-id.outputs.recipe_id }}"
          fi
      
      - name: Extract recipe data from issue
        id: extract-data
        run: |
          # Extract data from issue body
          BODY="${{ github.event.issue.body }}"
          echo "Raw issue body:"
          echo "$BODY"
          
          # Extract title - look for content after "Recipe Title" header
          TITLE=$(echo "$BODY" | awk '/^### Recipe Title$/{getline; getline; print}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "Extracted title: '$TITLE'"
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          
          # Extract URL - look for content after "Recipe URL" header
          URL=$(echo "$BODY" | awk '/^### Recipe URL$/{getline; getline; print}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "Extracted URL: '$URL'"
          echo "url=$URL" >> $GITHUB_OUTPUT
          
          # Extract tags - look for content after "Recipe Tags" header
          TAGS=$(echo "$BODY" | awk '/^### Recipe Tags$/{getline; getline; print}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "Extracted tags: '$TAGS'"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          
          # Extract custom tags - look for content after "Custom Tags" header
          CUSTOM_TAGS=$(echo "$BODY" | awk '/^### Custom Tags/{getline; getline; print}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "Extracted custom tags: '$CUSTOM_TAGS'"
          # Handle "_No response_" from GitHub issue forms
          if [ "$CUSTOM_TAGS" = "_No response_" ]; then
            CUSTOM_TAGS=""
          fi
          echo "custom_tags=$CUSTOM_TAGS" >> $GITHUB_OUTPUT
          
          # Extract notes - look for content after "Notes" header
          NOTES=$(echo "$BODY" | awk '/^### Notes/{getline; getline; print}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "Extracted notes: '$NOTES'"
          # Handle "_No response_" from GitHub issue forms
          if [ "$NOTES" = "_No response_" ]; then
            NOTES=""
          fi
          echo "notes=$NOTES" >> $GITHUB_OUTPUT
      
      - name: Create recipe JSON
        id: create-recipe
        run: |
          echo "Creating recipe JSON..."
          echo "Recipe ID: ${{ steps.generate-id.outputs.recipe_id }}"
          echo "Title: ${{ steps.extract-data.outputs.title }}"
          echo "URL: ${{ steps.extract-data.outputs.url }}"
          
          # Combine tags
          ALL_TAGS="${{ steps.extract-data.outputs.tags }}"
          if [ ! -z "${{ steps.extract-data.outputs.custom_tags }}" ]; then
            ALL_TAGS="$ALL_TAGS ${{ steps.extract-data.outputs.custom_tags }}"
          fi
          
          # Clean up tags (remove extra spaces, split by comma)
          CLEAN_TAGS=$(echo "$ALL_TAGS" | tr ',' ' ' | tr -s ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/[[:space:]]*$//')
          echo "Clean tags: $CLEAN_TAGS"
          
          # Extract source from URL
          SOURCE=$(echo "${{ steps.extract-data.outputs.url }}" | sed -E 's|^https?://([^/]+).*|\1|' | sed 's/^www\.//')
          echo "Source: $SOURCE"
          
          # Create recipe JSON with proper tag handling
          if [ -z "$CLEAN_TAGS" ]; then
            TAGS_JSON="[]"
          else
            TAGS_JSON="[$(echo "$CLEAN_TAGS" | tr ' ' '\n' | sed 's/^/"/;s/$/"/' | tr '\n' ',' | sed 's/,$//')]"
          fi
          
          RECIPE_JSON=$(cat <<EOF
{
  "id": "${{ steps.generate-id.outputs.recipe_id }}",
  "title": "${{ steps.extract-data.outputs.title }}",
  "url": "${{ steps.extract-data.outputs.url }}",
  "time_added": $(date +%s),
  "tags": $TAGS_JSON,
  "source": "$SOURCE"
}
EOF
)
          
          echo "Recipe JSON created:"
          echo "$RECIPE_JSON"
          
          echo "recipe_json<<EOF" >> $GITHUB_OUTPUT
          echo "$RECIPE_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create branch and update recipes.json
        run: |
          # Create new branch
          BRANCH_NAME="add-recipe-${{ steps.generate-id.outputs.recipe_id }}"
          echo "Creating branch: $BRANCH_NAME"
          echo "Recipe ID from previous step: ${{ steps.generate-id.outputs.recipe_id }}"
          git checkout -b "$BRANCH_NAME"
          
          # Robustly update recipes.json
          if [ -f "data/recipes.json" ]; then
            # Remove the last two lines (closing ] and }) and store the rest
            head -n -2 data/recipes.json > data/recipes_new.json
            # Check if there are already recipes (file longer than 3 lines)
            if [ $(wc -l < data/recipes_new.json) -gt 2 ]; then
              echo "  ," >> data/recipes_new.json
            fi
            # Add the new recipe
            echo "  ${{ steps.create-recipe.outputs.recipe_json }}" >> data/recipes_new.json
            # Add the closing lines
            echo "  ]" >> data/recipes_new.json
            echo "}" >> data/recipes_new.json
            mv data/recipes_new.json data/recipes.json
          else
            # Create new recipes.json file
            echo '{' > data/recipes.json
            echo '  "recipes": [' >> data/recipes.json
            echo '    ${{ steps.create-recipe.outputs.recipe_json }}' >> data/recipes.json
            echo '  ]' >> data/recipes.json
            echo '}' >> data/recipes.json
          fi
          
          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/recipes.json
          git commit -m "Add recipe: ${{ steps.extract-data.outputs.title }}"
          git push origin "$BRANCH_NAME"
      
      - name: Create PR body
        id: pr-body
        run: |
          BODY="This PR adds a new recipe to the collection.
          
          **Recipe Details:**
          - Title: ${{ steps.extract-data.outputs.title }}
          - URL: ${{ steps.extract-data.outputs.url }}
          - Source: ${{ steps.create-recipe.outputs.source }}
          - Tags: ${{ steps.extract-data.outputs.tags }}
          - Custom Tags: ${{ steps.extract-data.outputs.custom_tags || 'None' }}
          
          **Notes:**
          ${{ steps.extract-data.outputs.notes || 'No additional notes provided.' }}
          
          Closes #${{ github.event.issue.number }}"
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.generate-id.outputs.recipe_id }}-pr
          base: main
          title: "Add Recipe: ${{ steps.extract-data.outputs.title }}"
          body: ${{ steps.pr-body.outputs.body }}
          labels: recipe-add
          assignees: ${{ github.event.issue.user.login }}
      
      - name: Auto-merge PR
        run: |
          # Wait a moment for PR to be created
          sleep 10
          
          # Get PR number
          PR_NUMBER=$(gh pr list --head "${{ steps.generate-id.outputs.recipe_id }}-pr" --json number --jq '.[0].number')
          
          if [ ! -z "$PR_NUMBER" ]; then
            # Enable auto-merge
            gh pr merge "$PR_NUMBER" --auto --merge
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 